name: Google Java Format

on:
  push:
    branches: [ development, testing, acceptance, main, theme-support ]
  pull_request:
    branches: [ development, testing, acceptance, main, theme-support ]

# Define permissions at the top level
permissions:
  contents: write
  pull-requests: write

jobs:
  check-format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
      
      - name: Debug - Current Branch
        run: |
          echo "Current branch: ${{ github.ref_name }}"
          echo "Event type: ${{ github.event_name }}"
      
      # First check if formatting is needed without making changes
      - name: Check Google Java Format
        id: check-format
        continue-on-error: true
        uses: axel-op/googlejavaformat-action@v3
        with:
          args: "--dry-run --set-exit-if-changed"
          skip-commit: true
      
      # Report format status but don't fail the build
      - name: Report format status
        run: |
          if [ "${{ steps.check-format.outcome }}" == "failure" ]; then
            echo "::warning::üìã Formatting issues detected! We'll create a PR to fix them automatically."
            echo "üí° Files needing formatting:"
            git diff --name-only | grep "\.java$" || echo "No Java files modified"
          else
            echo "::notice::‚úÖ Code is already properly formatted! No changes needed."
          fi
  
  # Separate job to make formatting changes and create PR
  apply-format:
    runs-on: ubuntu-latest
    needs: check-format
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          # Use a PAT instead of GITHUB_TOKEN
          token: ${{ secrets.PAT || secrets.GITHUB_TOKEN }}
      
      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
      
      - name: Debug - Format Job
        run: |
          echo "Running formatting job on branch: ${{ github.ref_name }}"
          echo "Working with repository: ${{ github.repository }}"
      
      # Apply formatting
      - name: Apply Google Java Format
        uses: axel-op/googlejavaformat-action@v3
        with:
          args: "--replace"
          skip-commit: true
      
      # Check if changes were made
      - name: Check for modified files
        id: git-check
        run: |
          git diff --exit-code || echo "modified=true" >> $GITHUB_OUTPUT
      
      # Show what files were modified
      - name: Show modified files
        if: steps.git-check.outputs.modified == 'true'
        run: |
          echo "::notice::üîÑ Files that needed formatting:"
          git diff --name-only | grep "\.java$"
          echo "------------------------------------"
          echo "Sample diff from one file:"
          git diff --unified=1 | head -n 20
      
      # Try to create PR with GITHUB_TOKEN first, fallback to commit if that fails
      - name: Create Pull Request with formatting changes
        if: steps.git-check.outputs.modified == 'true'
        id: create-pr
        continue-on-error: true
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.PAT || secrets.GITHUB_TOKEN }}
          title: 'style: Format Java code with Google Java Format'
          commit-message: 'style: Format Java code with Google Java Format'
          body: |
            ## Automatic Code Formatting

            This PR formats the Java code according to Google Java Format standards.
            
            ### What changed?
            - Applied consistent indentation, spacing, and line breaks
            - Fixed import order and formatting
            - Ensured consistent brace placement
            
            ### Important
            If tests are failing, please verify that the formatting has not inadvertently changed test assertions or functionality.
          branch: automated-code-format
          base: ${{ github.ref_name }}
          delete-branch: true
      
      # Fallback to direct commit if PR creation fails
      - name: Fallback - Commit formatting changes directly
        if: steps.git-check.outputs.modified == 'true' && steps.create-pr.outcome == 'failure'
        run: |
          echo "::notice::‚ö†Ô∏è PR creation failed, falling back to direct commit"
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add .
          git commit -m "style: Format Java code with Google Java Format"
          git push
      
      # Final status message
      - name: Final status
        run: |
          if [ "${{ steps.git-check.outputs.modified }}" == "true" ]; then
            if [ "${{ steps.create-pr.outcome }}" == "success" ]; then
              echo "::notice::‚úÖ Pull Request created successfully to fix formatting issues!"
            elif [ "${{ steps.create-pr.outcome }}" == "failure" ]; then
              echo "::notice::‚úÖ Formatting changes committed directly to branch."
            fi
          else
            echo "::notice::‚úÖ No formatting changes were needed."
          fi
